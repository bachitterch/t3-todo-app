import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import { useSession, signIn, signOut } from 'next-auth/react'
import { getServerAuthSession } from "../server/common/get-server-auth-session";
import { trpc } from '../utils/trpc'
import { useState } from "react";


const Home: NextPage = () => {

  const [todo, setTodo] = useState('')

  const ctx = trpc.useContext()

  const createTodo = trpc.useMutation('todoscreateTodo', {
    onMutate: () => {
      ctx.cancelQuery(["todosgetTodos"])

      let update = ctx.getQueryData(["todosgetTodos"])
      if (update) {
        ctx.setQueryData(["todosgetTodos"], update)
      }
    },
    onSettled:() => {
      ctx.invalidateQueries(["todosgetTodos"])
    }
  })

  const { data: todos } = trpc.useQuery(["todosgetTodos"]);
  const { data: session, status } = useSession()

  const editTodo = trpc.useMutation('todosupdateTodo', {
    onMutate: ({ id, completed }) => {
      ctx.cancelQuery(['todosgetTodos']);

      const update = ctx.getQueryData(['todosgetTodos']);
      if (update) {
        ctx.setQueryData(["todosgetTodos"], update.map((t) => t.id === id ? { ...t, completed } : t ))
      }
      },
  });

  const deleteTodo = trpc.useMutation('todosdeleteTodo', {
    onMutate: ({ id }) => {
      ctx.cancelQuery(['todosgetTodos']);

      const update = ctx.getQueryData(['todosgetTodos']);
      if (update) {
        ctx.setQueryData(["todosgetTodos"], update.filter((t) => t.id !== id ))
      }
      },
  });


  if (status === "loading") {
    return <main>Loading...</main>;
  }

  return (
    <>
      <Head>
        <title>Todo App - T3 Stack</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex items-center justify-center w-full h-full">
        {
        session ? (
        <div className="flex flex-col space-y-4">
        <p>Signed in as {session?.user?.name} </p>
      <button className="bg-gray-200 px-3 py-2 rounded-lg" onClick={() => signOut()}>Sign Out</button>

            <div className="pt-6">
              <form
                className="flex gap-2"
                onSubmit={(event) => {
                  event.preventDefault();

                  createTodo.mutate({
                    todo,
                    completed: false
                  });

                  setTodo("");
                }}
              >
                <input
                  type="text"
                  value={todo}
                  placeholder="Your Todo..."
                  maxLength={100}
                  onChange={(event) => setTodo(event.target.value)}
                  className="px-3 py-2 bg-gray-300 rounded-lg focus:outline-none"
                />
                <button
                  type="submit"
                  className="bg-gray-200 px-3 py-2 rounded-lg focus:outline-none"
                >
                  Create Todo
                </button>
              </form>
            </div>

            {todos?.map((todo, index) => {
        return (
          <div key={index} className="flex space-x-4">
            <span>{todo.todo}</span> {' '}
             <button onClick={() => editTodo.mutate({
                    completed: todo.completed ? false : true,
                    id: todo.id
                  })}>{todo.completed ? '‚úÖ' : '‚ùå'}</button>
          <button onClick={() => deleteTodo.mutate({
                    id: todo.id
                  })}>üóëÔ∏è</button>

                </div>
        );
      })}
      </div>
        ) :(
         <div className="flex flex-col space-y-4">
      <p>Not signed in </p>
      <button className="bg-gray-200 px-3 py-2 rounded-lg" onClick={() => signIn('discord')}>Sign in</button>
    </div>
        )
      }
      </main>
    </>
  );
};

export default Home;



export const getServerSideProps: GetServerSideProps = async (context) => {

  const session = await getServerAuthSession(context)

  return {
    props: {
     session
    }
  }
}
